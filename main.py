import pymongo
from pymongo import MongoClient

# Параметры подключения
mongodb_host = "localhost"
mongodb_port = 27017
mongodb_username = "andrey"
mongodb_password = "2005"
mongodb_database = "laba"
mongodb_drop_existing = True  # Очищать ли бд перед заполнением

try:
    # Создание URI подключения
    if mongodb_username and mongodb_password:
        connection_string = f"mongodb://{mongodb_username}:{mongodb_password}@{mongodb_host}:{mongodb_port}/{mongodb_database}?authSource=admin"
    else:
        connection_string = f"mongodb://{mongodb_host}:{mongodb_port}/"

    # Создание клиента MongoClient
    client = MongoClient(connection_string)

    # Проверка подключения (пинг)
    client.admin.command('ping')
    print("Подключение к MongoDB успешно установлено!")

    # Получение доступа к базе данных
    db = client[mongodb_database]

    def populate_collection(collection_name, data):
        collection = db[collection_name]
        if mongodb_drop_existing:
            collection.delete_many({}) # Remove all documents from the collection
            print(f"Очищена коллекция {collection_name}.")
        collection.insert_many(data)
        print(f"Коллекция {collection_name} успешно заполнена.")


    # Данные для коллекции "СУДНО" (SHIPS)
    ships_data = [
        {"ИДЕНТИФИКАТОР": "001", "НАЗВАНИЕ": "Балтимор", "ПОРТ ПРИПИСКИ": "Одесса", "ЛЬГОТА,%": 3},
        {"ИДЕНТИФИКАТОР": "002", "НАЗВАНИЕ": "Генуя", "ПОРТ ПРИПИСКИ": "Одесса", "ЛЬГОТА,%": 3},
        {"ИДЕНТИФИКАТОР": "003", "НАЗВАНИЕ": "ТПР-123", "ПОРТ ПРИПИСКИ": "Владивосток", "ЛЬГОТА,%": 5},
        {"ИДЕНТИФИКАТОР": "004", "НАЗВАНИЕ": "Ф. Шаляпин", "ПОРТ ПРИПИСКИ": "Мурманск", "ЛЬГОТА,%": 6},
        {"ИДЕНТИФИКАТОР": "005", "НАЗВАНИЕ": "Рейн", "ПОРТ ПРИПИСКИ": "Калининград", "ЛЬГОТА,%": 4},
        {"ИДЕНТИФИКАТОР": "006", "НАЗВАНИЕ": "Россия", "ПОРТ ПРИПИСКИ": "Владивосток", "ЛЬГОТА,%": 5}
    ]

    # Данные для коллекции "МЕСТА ПОГРУЗКИ" (LOADING_PLACES)
    loading_places_data = [
        {"ИДЕНТИФИКАТОР": "001", "ПРИЧАЛ": "Северный", "ПОРТ": "Одесса", "ОТЧИСЛЕНИЯ НА ПОГРУЗКУ,%": 3},
        {"ИДЕНТИФИКАТОР": "002", "ПРИЧАЛ": "Южный", "ПОРТ": "Одесса", "ОТЧИСЛЕНИЯ НА ПОГРУЗКУ,%": 4},
        {"ИДЕНТИФИКАТОР": "003", "ПРИЧАЛ": "N1", "ПОРТ": "Владивосток", "ОТЧИСЛЕНИЯ НА ПОГРУЗКУ,%": 2},
        {"ИДЕНТИФИКАТОР": "004", "ПРИЧАЛ": "N2", "ПОРТ": "Владивосток", "ОТЧИСЛЕНИЯ НА ПОГРУЗКУ,%": 2},
        {"ИДЕНТИФИКАТОР": "005", "ПРИЧАЛ": "N3", "ПОРТ": "Владивосток", "ОТЧИСЛЕНИЯ НА ПОГРУЗКУ,%": 2},
        {"ИДЕНТИФИКАТОР": "006", "ПРИЧАЛ": "Основной", "ПОРТ": "Калининград", "ОТЧИСЛЕНИЯ НА ПОГРУЗКУ,%": 4}
    ]

    # Данные для коллекции "ГРУЗ" (CARGO)
    cargo_data = [
        {"ИДЕНТИФИКАТОР": "001", "НАЗВАНИЕ": "Рис", "ПОРТ СКЛАДИРОВАНИЯ": "Одесса", "СТОИМОСТЬ, РУБ": 100000, "МАКС. КОЛ-ВО": 700},
        {"ИДЕНТИФИКАТОР": "002", "НАЗВАНИЕ": "Зерно", "ПОРТ СКЛАДИРОВАНИЯ": "Одесса", "СТОИМОСТЬ, РУБ": 80000, "МАКС. КОЛ-ВО": 890},
        {"ИДЕНТИФИКАТОР": "003", "НАЗВАНИЕ": "Хлопок", "ПОРТ СКЛАДИРОВАНИЯ": "Одесса", "СТОИМОСТЬ, РУБ": 300000, "МАКС. КОЛ-ВО": 400},
        {"ИДЕНТИФИКАТОР": "004", "НАЗВАНИЕ": "Сахар", "ПОРТ СКЛАДИРОВАНИЯ": "Владивосток", "СТОИМОСТЬ, РУБ": 140000, "МАКС. КОЛ-ВО": 600},
        {"ИДЕНТИФИКАТОР": "005", "НАЗВАНИЕ": "Соль", "ПОРТ СКЛАДИРОВАНИЯ": "Мурманск", "СТОИМОСТЬ, РУБ": 120000, "МАКС. КОЛ-ВО": 700},
        {"ИДЕНТИФИКАТОР": "006", "НАЗВАНИЕ": "Скобяные изделия", "ПОРТ СКЛАДИРОВАНИЯ": "Калининград", "СТОИМОСТЬ, РУБ": 300000, "МАКС. КОЛ-ВО": 140},
        {"ИДЕНТИФИКАТОР": "007", "НАЗВАНИЕ": "Древесина", "ПОРТ СКЛАДИРОВАНИЯ": "Мурманск", "СТОИМОСТЬ, РУБ": 400000, "МАКС. КОЛ-ВО": 260},
        {"ИДЕНТИФИКАТОР": "008", "НАЗВАНИЕ": "Уголь", "ПОРТ СКЛАДИРОВАНИЯ": "Владивосток", "СТОИМОСТЬ, РУБ": 400000, "МАКС. КОЛ-ВО": 400}
    ]

    # Данные для коллекции "ПОГРУЗКА" (LOADING)
    loading_data = [
        {"НОМЕР ВЕДОМОСТИ": 70204, "ДАТА": "Понедельник", "СУДНО": "001", "МЕСТО ПОГРУЗКИ": "005", "ГРУЗ": "002", "КОЛ-ВО": 100, "СТОИМОСТЬ, РУБ": 8000000},
        {"НОМЕР ВЕДОМОСТИ": 70205, "ДАТА": "Понедельник", "СУДНО": "003", "МЕСТО ПОГРУЗКИ": "003", "ГРУЗ": "006", "КОЛ-ВО": 4, "СТОИМОСТЬ, РУБ": 1200000},
        {"НОМЕР ВЕДОМОСТИ": 70206, "ДАТА": "Вторник", "СУДНО": "001", "МЕСТО ПОГРУЗКИ": "005", "ГРУЗ": "007", "КОЛ-ВО": 2, "СТОИМОСТЬ, РУБ": 800000},
        {"НОМЕР ВЕДОМОСТИ": 70207, "ДАТА": "Вторник", "СУДНО": "002", "МЕСТО ПОГРУЗКИ": "005", "ГРУЗ": "001", "КОЛ-ВО": 20, "СТОИМОСТЬ, РУБ": 2000000},
        {"НОМЕР ВЕДОМОСТИ": 70208, "ДАТА": "Вторник", "СУДНО": "005", "МЕСТО ПОГРУЗКИ": "005", "ГРУЗ": "002", "КОЛ-ВО": 3, "СТОИМОСТЬ, РУБ": 240000},
        {"НОМЕР ВЕДОМОСТИ": 70209, "ДАТА": "Среда", "СУДНО": "003", "МЕСТО ПОГРУЗКИ": "003", "ГРУЗ": "006", "КОЛ-ВО": 4, "СТОИМОСТЬ, РУБ": 1200000},
        {"НОМЕР ВЕДОМОСТИ": 70210, "ДАТА": "Среда", "СУДНО": "004", "МЕСТО ПОГРУЗКИ": "001", "ГРУЗ": "001", "КОЛ-ВО": 70, "СТОИМОСТЬ, РУБ": 7000000},
        {"НОМЕР ВЕДОМОСТИ": 70211, "ДАТА": "Среда", "СУДНО": "004", "МЕСТО ПОГРУЗКИ": "002", "ГРУЗ": "006", "КОЛ-ВО": 1, "СТОИМОСТЬ, РУБ": 300000},
        {"НОМЕР ВЕДОМОСТИ": 70212, "ДАТА": "Среда", "СУДНО": "004", "МЕСТО ПОГРУЗКИ": "002", "ГРУЗ": "001", "КОЛ-ВО": 10, "СТОИМОСТЬ, РУБ": 1000000},
        {"НОМЕР ВЕДОМОСТИ": 70213, "ДАТА": "Четверг", "СУДНО": "001", "МЕСТО ПОГРУЗКИ": "006", "ГРУЗ": "003", "КОЛ-ВО": 20, "СТОИМОСТЬ, РУБ": 6000000},
        {"НОМЕР ВЕДОМОСТИ": 70214, "ДАТА": "Четверг", "СУДНО": "003", "МЕСТО ПОГРУЗКИ": "004", "ГРУЗ": "002", "КОЛ-ВО": 2, "СТОИМОСТЬ, РУБ": 16000},
        {"НОМЕР ВЕДОМОСТИ": 70215, "ДАТА": "Четверг", "СУДНО": "004", "МЕСТО ПОГРУЗКИ": "003", "ГРУЗ": "004", "КОЛ-ВО": 30, "СТОИМОСТЬ, РУБ": 4200000},
        {"НОМЕР ВЕДОМОСТИ": 70216, "ДАТА": "Суббота", "СУДНО": "003", "МЕСТО ПОГРУЗКИ": "002", "ГРУЗ": "005", "КОЛ-ВО": 10, "СТОИМОСТЬ, РУБ": 1200000},
        {"НОМЕР ВЕДОМОСТИ": 70217, "ДАТА": "Суббота", "СУДНО": "002", "МЕСТО ПОГРУЗКИ": "003", "ГРУЗ": "008", "КОЛ-ВО": 20, "СТОИМОСТЬ, РУБ": 8000000},
        {"НОМЕР ВЕДОМОСТИ": 70218, "ДАТА": "Суббота", "СУДНО": "001", "МЕСТО ПОГРУЗКИ": "001", "ГРУЗ": "001", "КОЛ-ВО": 20, "СТОИМОСТЬ, РУБ": 2000000},
        {"НОМЕР ВЕДОМОСТИ": 70219, "ДАТА": "Суббота", "СУДНО": "005", "МЕСТО ПОГРУЗКИ": "006", "ГРУЗ": "004", "КОЛ-ВО": 10, "СТОИМОСТЬ, РУБ": 1400000}
    ]

    # Заполнение коллекций
    populate_collection("ships", ships_data)
    populate_collection("loading_places", loading_places_data)
    populate_collection("cargo", cargo_data)
    populate_collection("loading", loading_data)

    unique_ships = db.ships.distinct("НАЗВАНИЕ")
    print("\n(4) Различные названия судов и их льготы:")
    for ship in unique_ships:
        ship_data = db.ships.find_one({"НАЗВАНИЕ": ship}, {"НАЗВАНИЕ": 1, "ЛЬГОТА,%": 1})
        print(f"Название судна: {ship_data['НАЗВАНИЕ']}, Льгота: {ship_data['ЛЬГОТА,%']}%")

    # Запрос для поиска грузов с количеством менее 500 единиц
    low_stock_cargo = db.cargo.find({"МАКС. КОЛ-ВО": {"$lt": 500}},
                                    {"НАЗВАНИЕ": 1, "МАКС. КОЛ-ВО": 1, "СТОИМОСТЬ, РУБ": 1})
    print("\n(5) Грузы с количеством менее 500 единиц:")

    for cargo in low_stock_cargo:
        print(
            f"Название: {cargo['НАЗВАНИЕ']}, Макс. кол-во: {cargo['МАКС. КОЛ-ВО']}, Стоимость: {cargo['СТОИМОСТЬ, РУБ']} руб.")

    # Запрос для получения данных о погрузке с сортировкой по дате и названию судна
    loading_data = db.loading.find({}, {"НОМЕР ВЕДОМОСТИ": 1, "ДАТА": 1, "СУДНО": 1, "СТОИМОСТЬ, РУБ": 1}).sort(
        [("ДАТА", 1), ("СУДНО", 1)])

    print("\n(6) Данные о погрузке:")
    for entry in loading_data:
        ship_name = db.ships.find_one({"ИДЕНТИФИКАТОР": entry["СУДНО"]}, {"НАЗВАНИЕ": 1})["НАЗВАНИЕ"]
        print(
            f"Номер ведомости: {entry['НОМЕР ВЕДОМОСТИ']}, Дата: {entry['ДАТА']}, Название судна: {ship_name}, Стоимость: {entry['СТОИМОСТЬ, РУБ']} руб.")

    # Запрос для получения названий судов, производивших погрузку в чужих портах с отчислениями на погрузку более 3%
    foreign_ports = db.loading_places.find({"ОТЧИСЛЕНИЯ НА ПОГРУЗКУ,%": {"$gt": 3}})

    print("\n(7) Суды, производившие погрузку в чужих портах с отчислениями на погрузку более 3%:")
    for port in foreign_ports:
        loading_data = db.loading.find({"МЕСТО ПОГРУЗКИ": port["ИДЕНТИФИКАТОР"]})
        for entry in loading_data:
            ship_name = db.ships.find_one({"ИДЕНТИФИКАТОР": entry["СУДНО"]}, {"НАЗВАНИЕ": 1})["НАЗВАНИЕ"]
            print(f"Название судна: {ship_name}, Порт: {port['ПОРТ']}, Причал: {port['ПРИЧАЛ']}")

    # Задание 10
    vladivostok_ports = db.loading_places.find({"ПОРТ": "Владивосток"}, {"ИДЕНТИФИКАТОР": 1})

    vladivostok_port_ids = [port["ИДЕНТИФИКАТОР"] for port in vladivostok_ports]

    ships_with_loadings_in_vladivostok = db.loading.find({"МЕСТО ПОГРУЗКИ": {"$in": vladivostok_port_ids}},
                                                         {"СУДНО": 1})
    ships_ids_with_loadings_in_vladivostok = {loading["СУДНО"] for loading in ships_with_loadings_in_vladivostok}

    all_ships = db.ships.find({}, {"ИДЕНТИФИКАТОР": 1, "НАЗВАНИЕ": 1})

    ships_not_in_vladivostok = [ship for ship in all_ships if
                                ship["ИДЕНТИФИКАТОР"] not in ships_ids_with_loadings_in_vladivostok]

    print("\n(10) Суда, не производившие погрузки на причалах Владивостока:")
    for ship in ships_not_in_vladivostok:
        print(f"Название: {ship['НАЗВАНИЕ']}, Идентификатор: {ship['ИДЕНТИФИКАТОР']}")

    # Запрос для определения порта приписки судна с самой дорогой погрузкой в среду
    max_loading_entry = db.loading.find_one({"ДАТА": "Среда"}, sort=[("СТОИМОСТЬ, РУБ", -1)])

    if max_loading_entry:
        ship = db.ships.find_one({"ИДЕНТИФИКАТОР": max_loading_entry["СУДНО"]})
        print(f"\n(11) Порт приписки судна с самой дорогой погрузкой в среду: {ship['ПОРТ ПРИПИСКИ']}")
    else:
        print("\n(11) Нет данных о погрузках в среду.")

    # Запрос для получения портов приписки судов и мест складирования грузов
    ports_and_storage_places = db.ships.aggregate([
        {
            "$lookup": {
                "from": "cargo",
                "let": {"ship_port": "$ПОРТ ПРИПИСКИ"},
                "pipeline": [
                    {
                        "$match": {
                            "$expr": {
                                "$eq": ["$ПОРТ СКЛАДИРОВАНИЯ", "$$ship_port"]
                            }
                        }
                    },
                    {
                        "$project": {
                            "_id": 0,
                            "НАЗВАНИЕ": 1,
                            "ПОРТ СКЛАДИРОВАНИЯ": 1
                        }
                    }
                ],
                "as": "cargo_info"
            }
        },
        {
            "$project": {
                "НАЗВАНИЕ": 1,
                "ПОРТ ПРИПИСКИ": 1,
                "cargo_info.НАЗВАНИЕ": 1,
                "cargo_info.ПОРТ СКЛАДИРОВАНИЯ": 1
            }
        }
    ])

    print("\n(12) Порты приписки судов и места складирования грузов:")
    for entry in ports_and_storage_places:
        cargo_ports = set([cargo['ПОРТ СКЛАДИРОВАНИЯ'] for cargo in entry['cargo_info']])
        print(
            f"Судно: {entry['НАЗВАНИЕ']}, Порт приписки: {entry['ПОРТ ПРИПИСКИ']}, Места складирования: {cargo_ports}")

    # Запрос для нахождения мест погрузки, на которых проходила погрузка всех судов из Одессы или Мурманска до пятницы
    ships_from_odessa_or_murmansk = db.ships.find({"ПОРТ ПРИПИСКИ": {"$in": ["Одесса", "Мурманск"]}},
                                                  {"ИДЕНТИФИКАТОР": 1})

    loading_places_for_ships = db.loading.find({
        "СУДНО": {"$in": [ship["ИДЕНТИФИКАТОР"] for ship in ships_from_odessa_or_murmansk]},
        "ДАТА": {"$ne": "Суббота", "$ne": "Воскресенье"}
    }).distinct("МЕСТО ПОГРУЗКИ")

    print("\n(13) Места погрузки для судов из Одессы или Мурманска до пятницы:")
    for place in loading_places_for_ships:
        print(place)

    # Запрос для определения судов, у которых стоимость самой дорогой погрузки в понедельник или вторник не превышала 100000
    expensive_loadings = db.loading.find({
        "ДАТА": {"$in": ["Понедельник", "Вторник"]},
        "СТОИМОСТЬ, РУБ": {"$lte": 100000}
    })

    # 1. Вычисление среднего значения льгот
    average_discount = db.ships.aggregate([
        {"$group": {"_id": None, "average_discount": {"$avg": "$ЛЬГОТА,%"}}}
    ]).next()["average_discount"]

    # 2. Получение всех уникальных портов
    all_ports = db.loading_places.distinct("ПОРТ")

    # 3. Получение судов, которые производили погрузку во всех портах
    ships_with_all_ports = db.loading.aggregate([
        {"$group": {
            "_id": "$СУДНО",
            "ports": {"$addToSet": "$МЕСТО ПОГРУЗКИ"}
        }},
        {"$match": {"$expr": {"$eq": [{"$size": "$ports"}, len(all_ports)]}}}
    ])

    # 4. Получение судов со льготами ниже среднего
    ships_with_low_discounts = db.ships.find({
        "ИДЕНТИФИКАТОР": {"$in": [ship["_id"] for ship in ships_with_all_ports]},
        "ЛЬГОТА,%": {"$lt": average_discount}
    })
    explanation = db.ships.find(ships_with_low_discounts).explain()
    print(explanation)

    print("\n(14) Суда с льготами ниже среднего, производившие погрузку во всех портах:")
    for ship in ships_with_low_discounts:
        print(f"Название: {ship['НАЗВАНИЕ']}, Порт приписки: {ship['ПОРТ ПРИПИСКИ']}, Льгота: {ship['ЛЬГОТА,%']}%")

    # Получение уникальных судов из найденных погрузок
    ship_ids = {loading["СУДНО"] for loading in expensive_loadings}

    # Проверка, есть ли найденные суда
    if not ship_ids:
        print("\n(15) Нет судов, у которых стоимость самой дорогой погрузки в понедельник или вторник не превышала 100000.")
    else:
        # Получение информации о судах
        ships_with_low_expensive_loadings = db.ships.find({
            "ИДЕНТИФИКАТОР": {"$in": list(ship_ids)}
        })

        print("(15) Суда, у которых стоимость самой дорогой погрузки в понедельник или вторник не превышала 100000:")
        for ship in ships_with_low_expensive_loadings:
            print(f"Название: {ship['НАЗВАНИЕ']}, Порт приписки: {ship['ПОРТ ПРИПИСКИ']}, Льгота: {ship['ЛЬГОТА,%']}%")


except Exception as e:
    print(f"Ошибка подключения к MongoDB: {e}")

finally:
    if 'client' in locals():
        client.close()
        print("Соединение с MongoDB закрыто.")